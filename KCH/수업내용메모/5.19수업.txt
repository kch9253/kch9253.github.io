

< 5월19일 수업내용 >

import java.util.Scanner; = 최상단에위치

Scanner OO = new Scanner(System.in);  (변수선언) / 항상 클래스 상단에 위치해야함

nextInt() = 메소드호출 / 다음 흐름으로 넘어가지않고 값을 입력해줘야 넘어감

시스템아웃프린트 + 인폿넥스트 = 한세트

변수 = 미지수찾는 / 답을찾는

% = 나머지연산자

double = 변수선언 (소수점을 포함한 값을 나타낸다)

정수 x 실수 = 실수값이나온다 (정수는 소수점을 표현할수없으니 두수를 곱하면 실수값을 따라간다)

double 에는 / 값이 들어가면안된다 (우선순위가없이 동일하게 계산해야한다) = 무조건 순서대로 계산됨

int 변수의 이름은 숫자로 시작할수없다

System.out.printf (); = 서식이 있는 문자열을 출력하는

("") = 괄호안 문자뒤에 백스페이스N 을 같이 입력할경우 줄바꿈이 가능하고 %d 를 입력할경우 
괄호안에 입력한 문구 뒤에 정수를 넣을수있다

%d = 숫자를 넣고싶은자리에 입력한후 해당 숫자를 , 를 통해 구분하여 입력한다 (위치 차례대로입력)
 / ★ printf 가 꼭있어야 %d 입력후 숫자삽입 가능

"" 안에 문구를 입력하고 %안에 숫자를 입력할경우 , 를 통해 숫자와 문구를 꼭 구분지어줘야한다 ex("Hello%d %dworld , 1 ,2")



(공간지정) = 

근사값을 사용하는데에는 double 이 더 정확하고 더 많이 표현가능하다 (float < double) = *더블을 많이씀

char = 케릭터 ( 문자형타입임 ) / (문자열) 과는 다른개념임 

<<<정수형타입>>>

정수형크기별 = byte(8) < short(16) < int(32) < long(64)

1비트 = 2 / 2비트 = 4 / 3비트 = 8 (*2 제곱형식)

(★★★★★정수형 비트 크기별값을 지정할때)
자리수를 표현하고 할때는 , 를 많이쓰는데 자바에서는 에러가뜨기때문에 큰수를 다룰때는 _ 를 사용하여 구분한다

비트크기 long 값을 입력할때 숫자끝에 L을 붙여주면 롱값이구나 하고 크기를 크게 받아들임 ex) long O = 123456789L;

공간이 넓을경우 큰공간에 많은걸 입력해도 괜찮은데 작은공간에 많은걸 넣으면안됨 (예 : int 박스안에 long 박스가 들어갈수없다)

특별한 경우가 아닌경우 int 를 통해 박스를 형성해주는것이좋다 

(★★★★★실수형 비트 크기별값을 지정할때)

float(32) < double(64) //// float O = 123.456F; (숫자뒤에 F를 붙여준다) = 그만큼 크기가 크다는것

정수 int 와 실수 float 는 값이 같다 둘이 합산을 할경우 정수는 실수형 타입을 따라간다 (ex 10000+1.0000) = 10001 이런식

%f = 실수를 표현할수있는 (printf 사용) = 숫자자리수%f 를 입력할경우 자리수에 맞게 소수점나옴
(ex : %.숫자f) 추가로 뭘 입력할경우 , 를 지어서 구분지어줘야함 (.숫자를 입력해야 소수점까지 나옴)

%d = 정수를 입력할때 "%숫자d" 이런식으로 입력할경우 입력한 숫자 자리수를 표현한다 숫자를 1~9 이런식으로 
입력하면 그 입력한 숫자가 그대로 나타나는데 예를 들어 03 이런식으로 입력하면 003 이런식으로 나온다  (%d 는 자리수다)
, 쉼표 뒤에 입력한 숫자만큼 %d 의 입력한 자리수만큼 채운다 ex) %04d , 110 = 0110


<<< ★★★★char 케릭터 >>>

char O = 값을 지정해준후 뒤에 입력값을 줄때 "" 가 아닌 '' 을 입력해야함 

<<< 논리값 >>>

println () 안에 산수연산은 불가능하다 +-*/ 불가능 지정값 그대로 입력해야함 

boolean O = ture; 이런식으로 입력하고 println(O) 경우 최종값 ture 나옴 ====== boolean 은 거짓,맞음 2가지만 결과나옴


<<<논리연산자>>> 맞으면 ture , 틀리면 false
end = 둘다 참이여야 참 / 하나라도 거짓이면 거짓 (&&)
or = 둘중하나라도 참이면 진실로 나옴 (||)





